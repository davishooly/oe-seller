// tslint:disable
/**
 * OE API
 * Test description
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';

import {
    SellerCreate,
    SellerCreateFromJSON,
    SellerCreateToJSON,
} from '../models';

export interface SellersCreateRequest {
    data: SellerCreate;
}


/**
 */
function sellersCreateRaw<T>(requestParameters: SellersCreateRequest, requestConfig: runtime.TypedQueryConfig<T, SellerCreate> = {}): QueryConfig<T> {
    if (requestParameters.data === null || requestParameters.data === undefined) {
        throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling sellersCreate.');
    }

    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', []];
    const config: QueryConfig<T> = {
        url: `/sellers`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || SellerCreateToJSON(requestParameters.data),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SellerCreateFromJSON(body), text);
    }

    return config;
}

/**
*/
export function sellersCreate<T>(requestParameters: SellersCreateRequest, requestConfig?: runtime.TypedQueryConfig<T, SellerCreate>): QueryConfig<T> {
    return sellersCreateRaw(requestParameters, requestConfig);
}

/**
 */
function sellersListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<SellerCreate>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', []];
    const config: QueryConfig<T> = {
        url: `/sellers`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(SellerCreateFromJSON), text);
    }

    return config;
}

/**
*/
export function sellersList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<SellerCreate>>): QueryConfig<T> {
    return sellersListRaw( requestConfig);
}

