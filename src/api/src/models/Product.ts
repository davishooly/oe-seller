// tslint:disable
/**
 * OE API
 * Test description
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Product
 */
export interface Product  {
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    readonly id?: number;
    /**
     * 
     * @type {Date}
     * @memberof Product
     */
    readonly createdOn?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Product
     */
    readonly modifiedOn?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof Product
     */
    readonly deleted?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    mode?: number;
    /**
     * Set to shipped if the product requires shipment.
     * @type {number}
     * @memberof Product
     */
    shippingMode?: number;
    /**
     * Enter a SKU (Stock Keeping Unit) number for your product. This is a product identification code that helps you track it through your inventory. People often use the number by the barcode on the product, but you can set up any numerical system you want to keep track of products.
     * @type {string}
     * @memberof Product
     */
    sku: string;
    /**
     * You can enter a Global Trade Item Number. This is typically a 14 digit identification number for all of your trade items. It can often be found by the barcode.
     * @type {string}
     * @memberof Product
     */
    gtin?: string;
    /**
     * You can enter the barcode number for your product. This is useful for inventory/stock tracking and analysis.
     * @type {string}
     * @memberof Product
     */
    barcode?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    profitCenter?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    costCenter?: string;
    /**
     * Set the measured width of your product or product packaging. This will provide customers with your product size and help with calculating shipping costs.
     * @type {string}
     * @memberof Product
     */
    width?: string;
    /**
     * Set the measured height of your product or product packaging. This will provide customers with your product size and help with calculating shipping costs.
     * @type {string}
     * @memberof Product
     */
    height?: string;
    /**
     * Set the measured depth or length of your product or product packaging. This will provide customers with your product size and help with calculating shipping costs.
     * @type {string}
     * @memberof Product
     */
    depth?: string;
    /**
     * Set the measured weight of your product WITHOUT its packaging. This will provide customers with your product weight.
     * @type {string}
     * @memberof Product
     */
    netWeight?: string;
    /**
     * Set the measured gross Weight of your product WITH its packaging. This will help with calculating shipping costs.
     * @type {string}
     * @memberof Product
     */
    grossWeight?: string;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    variationParent?: number;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    primaryImage?: number;
}

export function ProductFromJSON(json: any): Product {
    return {
        'id': !exists(json, 'id') ? undefined : json['id'],
        'createdOn': !exists(json, 'created_on') ? undefined : new Date(json['created_on']),
        'modifiedOn': !exists(json, 'modified_on') ? undefined : new Date(json['modified_on']),
        'deleted': !exists(json, 'deleted') ? undefined : json['deleted'],
        'mode': !exists(json, 'mode') ? undefined : json['mode'],
        'shippingMode': !exists(json, 'shipping_mode') ? undefined : json['shipping_mode'],
        'sku': json['sku'],
        'gtin': !exists(json, 'gtin') ? undefined : json['gtin'],
        'barcode': !exists(json, 'barcode') ? undefined : json['barcode'],
        'profitCenter': !exists(json, 'profit_center') ? undefined : json['profit_center'],
        'costCenter': !exists(json, 'cost_center') ? undefined : json['cost_center'],
        'width': !exists(json, 'width') ? undefined : json['width'],
        'height': !exists(json, 'height') ? undefined : json['height'],
        'depth': !exists(json, 'depth') ? undefined : json['depth'],
        'netWeight': !exists(json, 'net_weight') ? undefined : json['net_weight'],
        'grossWeight': !exists(json, 'gross_weight') ? undefined : json['gross_weight'],
        'variationParent': !exists(json, 'variation_parent') ? undefined : json['variation_parent'],
        'primaryImage': !exists(json, 'primary_image') ? undefined : json['primary_image'],
    };
}

export function ProductToJSON(value?: Product): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'mode': value.mode,
        'shipping_mode': value.shippingMode,
        'sku': value.sku,
        'gtin': value.gtin,
        'barcode': value.barcode,
        'profit_center': value.profitCenter,
        'cost_center': value.costCenter,
        'width': value.width,
        'height': value.height,
        'depth': value.depth,
        'net_weight': value.netWeight,
        'gross_weight': value.grossWeight,
        'variation_parent': value.variationParent,
        'primary_image': value.primaryImage,
    };
}


